<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup
grid = global.GRID;
gridWidth  = ds_grid_width(grid);
gridHeight = ds_grid_height(grid);

gridSep     = 16;
gridStartX  = 10;
gridStartY  = 10;
gridEndX    = gridStartX + (gridWidth  * gridSep);
gridEndY    = gridStartY + (gridHeight * gridSep);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug draw minimap
draw_set_color(c_white);
draw_text(0, 0, "Zoom " + string(CAMERA.zoom) );



/*
draw_set_color(c_white);
var sep = 15;

for(var i=0; i&lt;ds_list_size(global.chunks); i++) {
    var blockgrid = ds_list_find_value(global.chunks, i);   // iterate through the list of chunks
    
    
    for(var col=0; col&lt;ds_grid_width(blockgrid); col++) {
        for(var row=0; row&lt;ds_grid_height(blockgrid); row++) {
            var val = ds_grid_get(blockgrid, col, row);
            
            switch (val) {
                case '0':
                    draw_set_colour(c_black);
                    break;
            
                case '1':
                    draw_set_colour(c_dkgray);
                    break;
                
                case '2':
                    draw_set_colour(c_white);
                    break;
                    
                default:
                    draw_set_colour(c_green);
                    break;
            }
            
            draw_text(col * sep, (i * 150) + (row * sep), val);
            
        }
    }
}
*/


/*
gridWidth = ds_grid_width(global.GRID);
gridHeight= ds_grid_height(global.GRID);

for (var i=0; i&lt;gridWidth; i++) {
    var xx = gridStartX + (i * gridSep);
    draw_line_colour(xx, gridStartY, xx, gridEndY, c_gray, c_gray);     // columns
    
    for (var j=0; j&lt;gridHeight; j++) {
        var yy = gridStartY + (j * gridSep);
        draw_line_colour(gridStartX, yy, gridEndX, yy, c_gray, c_gray); // rows
        
        var drawX = gridStartX + (i * gridSep);
        var drawY = gridStartY + (j * gridSep);
        
        
        // global.FLOOR_GRID contents
        var floorContents = ds_grid_get(global.FLOOR_GRID, i, j);
        
        if (instance_exists(floorContents)) {
            switch (floorContents.object_index) {
                case FLOOR:
                    draw_set_color(c_dkgray);
                    draw_rectangle(drawX, drawY, drawX + gridSep, drawY + gridSep, false);
                    break;
            }
        }
        
        // global.GRID contents
        var contents = ds_grid_get(grid, i, j);

        if (instance_exists(contents)) {
            switch (contents.object_index) {
                case PLAYER:
                    draw_set_color(c_green);
                    draw_text(drawX, drawY, "o");
                    break;
                    
                case WALL:
                    draw_set_color(c_white);
                    draw_text(drawX, drawY, "X");
            }
        }
    }
}
*/

draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
