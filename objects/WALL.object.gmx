<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>STRUCTURE</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup
event_inherited();

roof = noone;
sprite_index = spr_walls;
targetSprite = spr_walls;
roof = instance_create(x, y - global.cellHeight, WALL_ROOF);
roof.wall = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy roof along with us
event_inherited();

if (instance_exists(roof)) {
    instance_destroy(roof, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// calculate sprite based on neighbours

// determine the correct sprite coords to use
var left  = getWall(column-1, row);
var right = getWall(column+1, row);
var up    = getWall(column, row-1);
var down  = getWall(column, row+1);


// single column
if ((!left) and (!right) and (!up) and (!down)) {
    spriteColumn = 3;
    spriteRow = 2;
}


// no left or right
if ((!right) and (!left)) {
    // top
    if ((!up) and (down)) {
        spriteColumn = 3;
        spriteRow = 1;
    }
    
    // middle
    if ((up) and (down)) {
        spriteColumn = 3;
        spriteRow = 2;
    }
    
    // bottom
    if ((up) and (!down)) {
        spriteColumn = 3;
        spriteRow = 3;
    }
}


// left side
if ((right) and (!left)) {
    // top
    if ((down) and (!up)) {
        spriteColumn = 0;
        spriteRow = 0;
    }
    
    // middle
    if ((down) and (up)) {
        spriteColumn = 0;
        spriteRow = 1;
    }
    
    // bottom
    if ((up) and (!down)) {
        spriteColumn = 0;
        spriteRow = 2;
    }
    
    // no down or up
    if ((!up) and (!down)) {
        spriteColumn = 0;
        spriteRow = 2;
    }
}


// middle column
if ((left) and (right)) {
    // top
    if ((down) and (!up)){
        spriteColumn = 1;
        spriteRow = 0;
    }
    
    // middle
    if ((down) and (up)){
        spriteColumn = 1;
        spriteRow = 1;
    }

    // bottom
    if ((up) and (!down)) {
        spriteColumn = 1;
        spriteRow = 2;
    }
    
    // no down or up
    if ((!up) and (!down)) {
        spriteColumn = 3;
        spriteRow = 0;
    }
}


// right side
if ((left) and (!right)) {
    // top
    if ((down) and (!up)){
        spriteColumn = 2;
        spriteRow = 0;
    }
    
    // middle
    if ((down) and (up)){
        spriteColumn = 2;
        spriteRow = 1;
    }
    
    // bottom
    if ((up) and (!down)) {
        spriteColumn = 2;
        spriteRow = 2;
    }
    
    // no down or up
    if ((!up) and (!down)) {
        spriteColumn = 2;
        spriteRow = 2;
    }
}


roof.image_index  = image_index; // so the roof matches the walls
roof.sprite_index = spr_roofs;
roof.spriteColumn = spriteColumn;
roof.spriteRow    = spriteRow;
roof.spriteWidth  = spriteWidth;
roof.spriteHeight = spriteHeight;

updateSpriteRequired = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
